{"version":3,"file":"main.js","mappings":"MAAA,MAAMA,EACF,WAAAC,CAAYC,GACRC,KAAKC,iBAAiBF,EAC1B,CAEA,gBAAAE,EAAiB,MAACC,EAAK,YAAEC,EAAW,QAAEC,IAClCJ,KAAKE,MAAQA,EACbF,KAAKG,YAAcA,EACnBH,KAAKI,QAAUA,CAGnB,EAGJ,MAAMC,EACFC,SAAW,GAEX,WAAAR,CAAYS,GACRP,KAAKO,YAAcA,CACvB,CAEA,OAAAC,CAAQC,GACJT,KAAKM,SAASI,KAAKD,EACvB,CAEA,OAAAE,CAAQC,GACJ,OAAOZ,KAAKM,SAASM,EACzB,EAGJ,MAAMC,EAAc,WAChB,MAAMA,EAAc,GACpB,IAAIC,EAcJ,MAAO,CAAEC,kBARiB,WACtB,OAAOD,CACX,EAM4BE,kBAJF,SAASC,GAC/BH,EAAiBD,EAAYI,EACjC,EAE+CC,WAZ5B,SAASC,GACxBN,EAAYH,KAAKS,EACrB,EAU2DN,cAC9D,CAjBmB,IAyBpB,SAAwBN,GACpB,MAAMY,EAAa,IAAId,EAcJ,oBAbnBQ,EAAYK,WAAWC,EAC3B,CAaAC,GACAP,EAAYG,kBAAkB,GAC9B,IAAIF,EAAiBD,EAAYE,qBAvBjC,SAAqBD,EAAgBf,GACjC,MAAMsB,EAAc,IAAIxB,EAkBP,CAACK,MAAO,aAAcC,YAAa,mBAAoBC,QAAS,kBAjBjFU,EAAeN,QAAQa,EAC3B,CAqBAC,CAAYR,GACZS,QAAQC,IAAIX,EAAYE,qBACxBQ,QAAQC,IAAIX,EAAYA,aAXxB,SAAuBC,EAAgBW,GACnCX,EAAeP,YAWW,eAXkB,CAWhDmB,CAAcZ,GACdS,QAAQC,IAAIX,EAAYA,Y","sources":["webpack://todo-list/./src/index.js"],"sourcesContent":["class TodoItem {\n    constructor(todoInfo) {\n        this.populateTodoItem(todoInfo);\n    }\n\n    populateTodoItem({title, description, dueDate}) {\n        this.title = title;\n        this.description = description;\n        this.dueDate = dueDate;\n        // add priority, repeated, notes and checklist\n        // check if this works for info I want a setter foe e.g duedate\n    }\n}\n\nclass Project {\n    itemList = [];\n\n    constructor(projectName){\n        this.projectName = projectName;\n    }\n\n    addItem(item) {\n        this.itemList.push(item);\n    }\n\n    getItem(itemIndex) {\n        return this.itemList[itemIndex];\n    }\n}\n\nconst projectList = (function() {\n    const projectList = [];\n    let currentProject;\n\n    const addProject = function(newProject) {\n        projectList.push(newProject);\n    }\n\n    const getCurrentProject = function() {\n        return currentProject;\n    }\n\n    const setCurrentProject = function(currentProjectIndex) {\n        currentProject = projectList[currentProjectIndex];\n    }\n\n    return { getCurrentProject, setCurrentProject, addProject, projectList };\n})();\n\n\nfunction todoCreator(currentProject, todoInfo) {\n    const newTodoItem = new TodoItem(todoInfo);\n    currentProject.addItem(newTodoItem);\n}\n\nfunction projectCreator(projectName) {\n    const newProject = new Project(projectName);\n    projectList.addProject(newProject);\n}\n\nfunction todoEditor(currentProject, todoInfo, todoItemIndex) {\n    const todoItem = currentProject.getItem(todoItemIndex);\n    todoItem.populateTodoItem(todoInfo);\n}\n\nfunction projectEditor(currentProject, newProjectName) {\n    currentProject.projectName = newProjectName;}\n\n\nconst todoItemInfo = {title: \"Todo Title\", description: \"Todo Description\", dueDate: \"Todo Due Date\"};\nconst newProjectName = \"New Project Name\"\nprojectCreator(newProjectName);\nprojectList.setCurrentProject(0);\nlet currentProject = projectList.getCurrentProject();\ntodoCreator(currentProject, todoItemInfo);\nconsole.log(projectList.getCurrentProject())\nconsole.log(projectList.projectList)\nprojectEditor(currentProject, \"Working Title\")\nconsole.log(projectList.projectList)\n\"stop\""],"names":["TodoItem","constructor","todoInfo","this","populateTodoItem","title","description","dueDate","Project","itemList","projectName","addItem","item","push","getItem","itemIndex","projectList","currentProject","getCurrentProject","setCurrentProject","currentProjectIndex","addProject","newProject","projectCreator","newTodoItem","todoCreator","console","log","newProjectName","projectEditor"],"sourceRoot":""}